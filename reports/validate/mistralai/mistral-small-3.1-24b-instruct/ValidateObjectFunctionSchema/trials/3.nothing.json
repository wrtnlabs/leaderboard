{
  "type": "nothing",
  "completion": {
    "id": "gen-1743693889-NWMyQL9JBHSbAvq666Na",
    "provider": "Mistral",
    "model": "mistralai/mistral-small-3.1-24b-instruct",
    "object": "chat.completion",
    "created": 1743693889,
    "choices": [
      {
        "logprobs": null,
        "finish_reason": "length",
        "native_finish_reason": "length",
        "index": 0,
        "message": {
          "role": "assistant",
          "content": "[{\"name\": \"enrollFunction\", \"arguments\": {\"schema\": {\"name\": \"drawCircle\", \"parameters\": {\"$defs\": {\"RecordstringIChatGptSchema\": {\"description\": \"Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {\"$ref\": \"#/$defs/IChatGptSchema\"}}}, \"IChatGptSchema\": {\"title\": \"Type schema info of the ChatGpt\", \"description\": \"Type schema info of the ChatGpt.\\n\\n`IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n\\n`IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\nspecification; {@link OpenApiV3_1.IJsonSchema}.\\n\\nHowever, the `IChatGptSchema` does not follow the entire specification of\\nthe OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\nlist of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n\\n- Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n- Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n- Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n- Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n- Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n- Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n- Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n- When {@link IChatGptSchema.IConfig.strict} mode\\n  - Every object properties must be required\\n  - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n\\nIf compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n\\n- {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n- {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n- {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n- {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n- No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n- When {@link IChatGptSchema.IConfig.strict} mode\\n  - Every object properties must be required\\n  - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n\\nFor reference, if you've composed the `IChatGptSchema` type with the\\n{@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\nonly the recursived named types would be archived into the\\n{@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n{@link IChatGptSchema.IReference} type.\\n\\nAlso, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\nfills the {@link IChatGptSchema.__IAttribute.description} property with\\nthe comment text like `\\\"@format uuid\\\"`.\\n\\n- {@link OpenApi.IJsonSchema.INumber.minimum}\\n- {@link OpenApi.IJsonSchema.INumber.maximum}\\n- {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n- {@link OpenApi.IJsonSchema.IString.minLength}\\n- {@link OpenApi.IJsonSchema.IString.maxLength}\\n- {@link OpenApi.IJsonSchema.IString.format}\\n- {@link OpenApi.IJsonSchema.IString.pattern}\\n- {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n- {@link OpenApi.IJsonSchema.IString.default}\\n- {@link OpenApi.IJsonSchema.IArray.minItems}\\n- {@link OpenApi.IJsonSchema.IArray.maxItems}\\n- {@link OpenApi.IJsonSchema.IArray.unique}\\n\\nAdditionally, OpenAI cannot define the `description` property to the\\n{@link IChatGptSchema.IReference} type, and even does not understand\\nthe capsulization to the {@link IChatGptSchema.IAnyOf} type.\\nTherefore, the `description` is written to the parent object type,\\nnot the reference type.\\n\\n```json\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n  \\\"properties\\\": {\\n    \\\"something\\\": {\\n      \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n    }\\n  }\\n}\\n```\", \"anyOf\": [{\"$ref\": \"#/$defs/IChatGptSchema.IObject\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"boolean\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"boolean\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IBoolean} type:\\n\\n> Boolean type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"integer\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IInteger} type:\\n\\n> Integer type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"number\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.INumber} type:\\n\\n> Number (double) type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"string\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IString} type:\\n\\n> String type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"$ref\": \"#/$defs/IChatGptSchema.IArray\"}, {\"type\": \"object\", \"properties\": {\"$ref\": {\"title\": \"Reference to the named schema\", \"description\": \"Reference to the named schema.\\n\\nThe `ref` is a reference to the named schema. Format of the `$ref` is\\nfollowing the JSON Pointer specification. In the OpenAPI, the `$ref`\\nstarts with `#/$defs/` which means the type is stored in\\nthe {@link IChatGptSchema.IParameters.$defs} object.\\n\\n- `#/$defs/SomeObject`\\n- `#/$defs/AnotherObject`\", \"type\": \"string\"}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"$ref\"], \"description\": \"Description of the current {@link IChatGptSchema.IReference} type:\\n\\n> Reference type directing named schema.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"$ref\": \"#/$defs/IChatGptSchema.IAnyOf\"}, {\"type\": \"object\", \"properties\": {\"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [], \"description\": \"Description of the current {@link IChatGptSchema.IUnknown} type:\\n\\n> Unknown, the `any` type.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"null\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.INull} type:\\n\\n> Null type.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}]}, \"IChatGptSchema.IObject\": {\"description\": \"Object type info.\\n\\n### Description of {@link properties} property:\\n\\n> Properties of the object.\\n> \\n> The `properties` means a list of key-value pairs of the object's\\n> regular properties. The key is the name of the regular property,\\n> and the value is the type schema info.\", \"type\": \"object\", \"properties\": {\"properties\": {\"title\": \"Properties of the object\", \"$ref\": \"#/$defs/RecordstringIChatGptSchema\"}, \"additionalProperties\": {\"title\": \"Additional properties' info\", \"description\": \"Additional properties' info.\\n\\nThe `additionalProperties` means the type schema info of the additional\\nproperties that are not listed in the {@link properties}.\\n\\nBy the way, if you've configured {@link IChatGptSchema.IConfig.strict} as `true`,\\nChatGpt function calling does not support such dynamic key typed properties, so\\nthe `additionalProperties` becomes always `false`.\", \"anyOf\": [{\"type\": \"boolean\"}, {\"$ref\": \"#/$defs/IChatGptSchema.IObject\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"string\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IString} type:\\n\\n> String type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"number\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.INumber} type:\\n\\n> Number (double) type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"integer\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IInteger} type:\\n\\n> Integer type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"boolean\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"boolean\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IBoolean} type:\\n\\n> Boolean type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"$ref\": \"#/$defs/IChatGptSchema.IArray\"}, {\"type\": \"object\", \"properties\": {\"$ref\": {\"title\": \"Reference to the named schema\", \"description\": \"Reference to the named schema.\\n\\nThe `ref` is a reference to the named schema. Format of the `$ref` is\\nfollowing the JSON Pointer specification. In the OpenAPI, the `$ref`\\nstarts with `#/$defs/` which means the type is stored in\\nthe {@link IChatGptSchema.IParameters.$defs} object.\\n\\n- `#/$defs/SomeObject`\\n- `#/$defs/AnotherObject`\", \"type\": \"string\"}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"$ref\"], \"description\": \"Description of the current {@link IChatGptSchema.IReference} type:\\n\\n> Reference type directing named schema.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"$ref\": \"#/$defs/IChatGptSchema.IAnyOf\"}, {\"type\": \"object\", \"properties\": {\"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [], \"description\": \"Description of the current {@link IChatGptSchema.IUnknown} type:\\n\\n> Unknown, the `any` type.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"null\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.INull} type:\\n\\n> Null type.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}]}, \"required\": {\"title\": \"List of key values of the required properties\", \"description\": \"List of key values of the required properties.\\n\\nThe `required` means a list of the key values of the required\\n{@link properties}. If some property key is not listed in the `required`\\nlist, it means that property is optional. Otherwise some property key\\nexists in the `required` list, it means that the property must be filled.\\n\\nBelow is an example of the {@link properties} and `required`.\\n\\n```typescript\\ninterface SomeObject {\\n  id: string;\\n  email: string;\\n  name?: string;\\n}\\n```\\n\\nAs you can see, `id` and `email` {@link properties} are {@link required},\\nso that they are listed in the `required` list.\\n\\n```json\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"id\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"email\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"name\\\": { \\\"type\\\": \\\"string\\\" }\\n  },\\n  \\\"required\\\": [\\\"id\\\", \\\"email\\\"]\\n}\\n```\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"object\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"properties\", \"required\", \"type\"]}, \"IChatGptSchema.IArray\": {\"description\": \"Array type info.\\n\\n### Description of {@link items} property:\\n\\n> Items type info.\\n> \\n> The `items` means the type of the array elements. In other words, it is\\n> the type schema info of the `T` in the TypeScript array type `Array<T>`.\", \"type\": \"object\", \"properties\": {\"items\": {\"title\": \"Items type info\", \"$ref\": \"#/$defs/IChatGptSchema\"}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"array\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"items\", \"type\"]}, \"IChatGptSchema.IAnyOf\": {\"description\": \"Union type.\\n\\nIOneOf` represents an union type of the TypeScript (`A | B | C`).\\n\\nFor reference, even though your Swagger (or OpenAPI) document has\\ndefined `anyOf` instead of the `oneOf`, {@link IChatGptSchema} forcibly\\nconverts it to `oneOf` type.\", \"type\": \"object\", \"properties\": {\"anyOf\": {\"title\": \"List of the union types\", \"description\": \"List of the union types.\", \"type\": \"array\", \"items\": {\"anyOf\": [{\"$ref\": \"#/$defs/IChatGptSchema.IObject\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"string\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IString} type:\\n\\n> String type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"number\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.INumber} type:\\n\\n> Number (double) type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link OpenApiV3_1.IJsonSchema}.\\n> \\n> However, the `IChatGptSchema` does not follow the entire specification of\\n> the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\\n> list of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\\n> \\n> - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\\n> - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\\n> - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\\n> - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\\n> - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IChatGptSchema.IReference}\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\\n> \\n> - {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\\n> - {@link IChatGptSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.IComponents.schemas}\\n> - {@link IChatGptSchema.IString.enum} instead of the {@link OpenApi.IJsonSchema.IConstant}\\n> - {@link IChatGptSchema.additionalProperties} is fixed to `false`\\n> - No tuple type {@link OpenApi.IJsonSchema.ITuple} support\\n> - When {@link IChatGptSchema.IConfig.strict} mode\\n>   - Every object properties must be required\\n>   - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\\n> \\n> For reference, if you've composed the `IChatGptSchema` type with the\\n> {@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\\n> only the recursived named types would be archived into the\\n> {@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from the\\n> {@link IChatGptSchema.IReference} type.\\n> \\n> Also, OpenAI has banned below constraint properties. Instead, `IChatGptSchema`\\n> fills the {@link IChatGptSchema.__IAttribute.description} property with\\n> the comment text like `\\\"@format uuid\\\"`.\\n> \\n> - {@link OpenApi.IJsonSchema.INumber.minimum}\\n> - {@link OpenApi.IJsonSchema.INumber.maximum}\\n> - {@link OpenApi.IJsonSchema.INumber.multipleOf}\\n> - {@link OpenApi.IJsonSchema.IString.minLength}\\n> - {@link OpenApi.IJsonSchema.IString.maxLength}\\n> - {@link OpenApi.IJsonSchema.IString.format}\\n> - {@link OpenApi.IJsonSchema.IString.pattern}\\n> - {@link OpenApi.IJsonSchema.IString.contentMediaType}\\n> - {@link OpenApi.IJsonSchema.IString.default}\\n> - {@link OpenApi.IJsonSchema.IArray.minItems}\\n> - {@link OpenApi.IJsonSchema.IArray.maxItems}\\n> - {@link OpenApi.IJsonSchema.IArray.unique}\\n> \\n> Additionally, OpenAI cannot define the `description` property to the\\n> {@link IChatGptSchema.IReference} type, and even does not understand\\n> the capsulization to the {@link IChatGptSchema.IAnyOf} type.\\n> Therefore, the `description` is written to the parent object type,\\n> not the reference type.\\n> \\n> ```json\\n> {\\n>   \\\"type\\\": \\\"object\\\",\\n>   \\\"description\\\": \\\"### Description of {@link something} property.\\\\n\\\\n> Hello?\\\",\\n>   \\\"properties\\\": {\\n>     \\\"something\\\": {\\n>       \\\"$ref\\\": \\\"#/$defs/SomeObject\\\"\\n>     }\\n>   }\\n> }\\n> ```\"}, {\"type\": \"object\", \"properties\": {\"enum\": {\"title\": \"Enumeration values\", \"description\": \"Enumeration values.\", \"type\": \"array\", \"items\": {\"type\": \"number\"}}, \"type\": {\"title\": \"Discriminator value of the type\", \"description\": \"Discriminator value of the type.\", \"type\": \"string\", \"enum\": [\"integer\"]}, \"title\": {\"title\": \"Title of the schema\", \"description\": \"Title of the schema.\", \"type\": \"string\"}, \"description\": {\"title\": \"Detailed description of the schema\", \"description\": \"Detailed description of the schema.\", \"type\": \"string\"}, \"deprecated\": {\"title\": \"Whether the type is deprecated or not\", \"description\": \"Whether the type is deprecated or not.\", \"type\": \"boolean\"}, \"example\": {\"title\": \"Example value\", \"description\": \"Example value.\"}, \"examples\": {\"description\": \"List of example values as key-value pairs.\\n\\n------------------------------\\n\\nDescription of the current {@link Recordstringany} type:\\n\\n> Construct a type with a set of properties K of type T\", \"type\": \"object\", \"properties\": {}, \"required\": [], \"additionalProperties\": {}}}, \"required\": [\"type\"], \"description\": \"Description of the current {@link IChatGptSchema.IInteger} type:\\n\\n> Integer type info.\\n\\n------------------------------\\n\\nDescription of the parent {@link IChatGptSchema} type:\\n\\n> Type schema info of the ChatGpt.\\n> \\n> `IChatGptSchema` is a type schema info of the ChatGpt function calling.\\n> \\n> `IChatGptSchema` basically follows the JSON schema definition of the OpenAPI v3.1\\n> specification; {@link Open",
          "refusal": null
        }
      }
    ],
    "usage": {
      "prompt_tokens": 39263,
      "completion_tokens": 25520,
      "total_tokens": 64783
    }
  },
  "started_at": "2025-04-03T15:24:49.520Z",
  "completed_at": "2025-04-03T15:34:34.560Z",
  "previous": []
}
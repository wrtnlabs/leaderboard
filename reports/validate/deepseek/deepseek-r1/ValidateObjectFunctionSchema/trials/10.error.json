{
  "type": "error",
  "error": {
    "status": 500,
    "headers": {
      "access-control-allow-origin": "*",
      "cf-ray": "92a98e97bf7948cb-LHR",
      "connection": "keep-alive",
      "content-length": "21",
      "content-type": "text/plain; charset=UTF-8",
      "date": "Thu, 03 Apr 2025 15:21:39 GMT",
      "server": "cloudflare",
      "vary": "Accept-Encoding",
      "x-clerk-auth-message": "Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid, token-carrier=header)",
      "x-clerk-auth-reason": "token-invalid",
      "x-clerk-auth-status": "signed-out"
    }
  },
  "started_at": "2025-04-03T15:21:38.193Z",
  "completed_at": "2025-04-03T15:21:39.911Z",
  "previous": [
    {
      "type": "failure",
      "id": "call_gwmm20u9o0h6pe0gwbujt0mn",
      "arguments": {
        "schema": {
          "name": "drawCircle",
          "description": "Draw a circle with the given center and radius.",
          "parameters": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "circle"
                ],
                "description": "Must be 'circle'"
              },
              "center": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "X coordinate"
                  },
                  "y": {
                    "type": "number",
                    "description": "Y coordinate"
                  }
                },
                "required": [
                  "x",
                  "y"
                ]
              },
              "radius": {
                "type": "number",
                "description": "@minimum 0\nRadius must be non-negative"
              }
            },
            "required": [
              "type",
              "center",
              "radius"
            ]
          },
          "output": {
            "type": "null",
            "description": "Void return type"
          }
        }
      },
      "result": {
        "success": false,
        "errors": [
          {
            "path": "$input.schema.parameters.$defs",
            "expected": "Record<string, IChatGptSchema>"
          },
          {
            "path": "$input.schema.parameters.additionalProperties",
            "expected": "false"
          }
        ],
        "data": {
          "schema": {
            "name": "drawCircle",
            "description": "Draw a circle with the given center and radius.",
            "parameters": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "circle"
                  ],
                  "description": "Must be 'circle'"
                },
                "center": {
                  "type": "object",
                  "properties": {
                    "x": {
                      "type": "number",
                      "description": "X coordinate"
                    },
                    "y": {
                      "type": "number",
                      "description": "Y coordinate"
                    }
                  },
                  "required": [
                    "x",
                    "y"
                  ]
                },
                "radius": {
                  "type": "number",
                  "description": "@minimum 0\nRadius must be non-negative"
                }
              },
              "required": [
                "type",
                "center",
                "radius"
              ]
            },
            "output": {
              "type": "null",
              "description": "Void return type"
            }
          }
        }
      },
      "completion": {
        "id": "gen-1743693612-AmaeFHcDGdQKnXJvvCRU",
        "provider": "Novita",
        "model": "deepseek/deepseek-r1",
        "object": "chat.completion",
        "created": 1743693612,
        "choices": [
          {
            "logprobs": null,
            "finish_reason": "tool_calls",
            "native_finish_reason": "tool_calls",
            "index": 0,
            "message": {
              "role": "assistant",
              "content": "",
              "refusal": null,
              "reasoning": "Okay, I need to convert the given TypeScript function into a schema using the enrollFunction tool. Let me start by understanding the function and its parameters.\n\nThe function is called drawCircle, and it takes a props object with type 'circle', a center object containing x and y (both numbers), and a radius that's a number with a minimum of 0. The function returns void.\n\nFirst, I should map the TypeScript types to the schema structure. The props parameter is an object, so in the schema, it should be of type object with properties. \n\nThe 'type' property is a string with a fixed value \"circle\", so in the schema, that's an enum with only \"circle\" allowed. The center is another object with x and y, both numbers. The radius is a number, but with a minimum of 0. Since the schema doesn't support minimum directly, I need to add a description note like \"@minimum 0\".\n\nAlso, since all properties (type, center, radius) are required, they should be listed in the required array. The center's properties x and y are required too, so they go into their own required array.\n\nNow, putting this all together into the schema structure. The $defs section will include any nested objects if necessary, but in this case, the center is inline, so maybe it's better to define it directly under properties.\n\nWait, the schema requires $defs for any referenced types? But in this example, the center is an inline object. However, since the enrollFunction's schema might require references for nested objects, I need to check the example provided. \n\nLooking back at the example in the tools section, when there's a nested object, it's defined directly under properties without a $ref. So maybe I can structure the center as an object within the properties.\n\nFor the radius, since we can't use minimum in the schema, adding a description with \"@minimum 0\" would be the way to go, as per the instructions.\n\nLet me structure the parameters as an object with properties for type, center, and radius. Each of these will have their respective types. The center will be an object with x and y as numbers, both required. The radius is a number with a description noting the minimum.\n\nFinally, the required array for the top-level props includes type, center, and radius. The center's required array includes x and y.\n\nLet me double-check to ensure all required fields are included and the schema adheres to the provided structure. Also, make sure that the function name and description are correctly set in the schema.\n",
              "tool_calls": [
                {
                  "index": 0,
                  "id": "call_gwmm20u9o0h6pe0gwbujt0mn",
                  "type": "function",
                  "function": {
                    "name": "enrollFunction",
                    "arguments": "{\n  \"schema\": {\n    \"name\": \"drawCircle\",\n    \"description\": \"Draw a circle with the given center and radius.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\"circle\"],\n          \"description\": \"Must be 'circle'\"\n        },\n        \"center\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"x\": {\"type\": \"number\", \"description\": \"X coordinate\"},\n            \"y\": {\"type\": \"number\", \"description\": \"Y coordinate\"}\n          },\n          \"required\": [\"x\", \"y\"]\n        },\n        \"radius\": {\n          \"type\": \"number\",\n          \"description\": \"@minimum 0\\nRadius must be non-negative\"\n        }\n      },\n      \"required\": [\"type\", \"center\", \"radius\"]\n    },\n    \"output\": {\n      \"type\": \"null\",\n      \"description\": \"Void return type\"\n    }\n  }\n}"
                  }
                }
              ]
            }
          }
        ],
        "system_fingerprint": "",
        "usage": {
          "prompt_tokens": 48036,
          "completion_tokens": 786,
          "total_tokens": 48822,
          "prompt_tokens_details": {
            "cached_tokens": 0
          },
          "completion_tokens_details": {
            "reasoning_tokens": 533
          }
        }
      },
      "started_at": "2025-04-03T15:20:11.862Z",
      "completed_at": "2025-04-03T15:21:38.192Z",
      "previous": []
    }
  ]
}
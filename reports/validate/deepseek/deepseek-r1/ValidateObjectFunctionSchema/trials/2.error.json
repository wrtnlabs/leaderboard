{
  "type": "error",
  "error": {
    "status": 500,
    "headers": {
      "access-control-allow-origin": "*",
      "cf-ray": "92a98dcabcabeb18-MAN",
      "connection": "keep-alive",
      "content-length": "21",
      "content-type": "text/plain; charset=UTF-8",
      "date": "Thu, 03 Apr 2025 15:21:07 GMT",
      "server": "cloudflare",
      "vary": "Accept-Encoding",
      "x-clerk-auth-message": "Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid, token-carrier=header)",
      "x-clerk-auth-reason": "token-invalid",
      "x-clerk-auth-status": "signed-out"
    }
  },
  "started_at": "2025-04-03T15:21:05.290Z",
  "completed_at": "2025-04-03T15:21:07.065Z",
  "previous": [
    {
      "type": "failure",
      "id": "call_dtx9pn8uuu00hzxhwfr1gb06",
      "arguments": {
        "schema": {
          "name": "drawCircle",
          "description": "Draw a circle with the given center and radius.",
          "parameters": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "circle"
                ],
                "description": "Type of shape to draw"
              },
              "center": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "X coordinate of the center"
                  },
                  "y": {
                    "type": "number",
                    "description": "Y coordinate of the center"
                  }
                },
                "required": [
                  "x",
                  "y"
                ],
                "description": "Center coordinates of the circle"
              },
              "radius": {
                "type": "number",
                "description": "Radius of the circle @format minimum 0"
              }
            },
            "required": [
              "type",
              "center",
              "radius"
            ],
            "$defs": {}
          },
          "output": {
            "type": "null",
            "description": "No return value"
          }
        }
      },
      "result": {
        "success": false,
        "errors": [
          {
            "path": "$input.schema.parameters.additionalProperties",
            "expected": "false"
          }
        ],
        "data": {
          "schema": {
            "name": "drawCircle",
            "description": "Draw a circle with the given center and radius.",
            "parameters": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "circle"
                  ],
                  "description": "Type of shape to draw"
                },
                "center": {
                  "type": "object",
                  "properties": {
                    "x": {
                      "type": "number",
                      "description": "X coordinate of the center"
                    },
                    "y": {
                      "type": "number",
                      "description": "Y coordinate of the center"
                    }
                  },
                  "required": [
                    "x",
                    "y"
                  ],
                  "description": "Center coordinates of the circle"
                },
                "radius": {
                  "type": "number",
                  "description": "Radius of the circle @format minimum 0"
                }
              },
              "required": [
                "type",
                "center",
                "radius"
              ],
              "$defs": {}
            },
            "output": {
              "type": "null",
              "description": "No return value"
            }
          }
        }
      },
      "completion": {
        "id": "gen-1743693612-qFETf3b3XFt4pQB7IWYr",
        "provider": "Novita",
        "model": "deepseek/deepseek-r1",
        "object": "chat.completion",
        "created": 1743693612,
        "choices": [
          {
            "logprobs": null,
            "finish_reason": "tool_calls",
            "native_finish_reason": "tool_calls",
            "index": 0,
            "message": {
              "role": "assistant",
              "content": "",
              "refusal": null,
              "reasoning": "Okay, let's see. The user wants to convert the given TypeScript function into a schema using the enrollFunction tool. The function is called drawCircle, and it takes an object with properties type, center, and radius. The center is another object with x and y coordinates, both numbers. The radius is a number that must be at least 0.\n\nFirst, I need to map the TypeScript types to the IChatGptSchema. The main object is an object type, so I'll start with that. The type property is a string literal \"circle\", which should be an enum in the schema. The center is an object with x and y, both numbers. The radius is a number with a minimum of 0, but since ChatGPT doesn't support minimum constraints directly, I should add a description note about it.\n\nWait, the schema doesn't allow constraints like minimum, so I need to include that in the description. The radius has a Minimum tag, so I'll mention that in the description using @format. Also, the function returns void, so the output in the schema should be undefined or omitted.\n\nLet me structure the parameters. The root object has properties type, center, and radius. Each of these needs to be defined in the properties section. The center is another object, so that's a nested schema. The radius is a number with a note in the description.\n\nI should also make sure all required fields are listed. All three properties are required, so they go into the required array. The $defs section might not be needed here since there are no recursive or referenced types, but the schema requires $defs to be present, even if empty.\n\nPutting it all together, the enrollFunction schema should have the name \"drawCircle\", a description explaining the function, parameters structured as objects with the necessary properties and descriptions, and the output as undefined. The radius's minimum constraint is added as a comment in the description since it can't be enforced in the schema directly.\n\nDouble-checking for any missed details. The function is void, so output is handled. All parameters are correctly translated. Descriptions are added where necessary. The $defs are included as an empty object. Looks good.\n",
              "tool_calls": [
                {
                  "index": 0,
                  "id": "call_dtx9pn8uuu00hzxhwfr1gb06",
                  "type": "function",
                  "function": {
                    "name": "enrollFunction",
                    "arguments": "{\n  \"schema\": {\n    \"name\": \"drawCircle\",\n    \"description\": \"Draw a circle with the given center and radius.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\"circle\"],\n          \"description\": \"Type of shape to draw\"\n        },\n        \"center\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\",\n              \"description\": \"X coordinate of the center\"\n            },\n            \"y\": {\n              \"type\": \"number\",\n              \"description\": \"Y coordinate of the center\"\n            }\n          },\n          \"required\": [\"x\", \"y\"],\n          \"description\": \"Center coordinates of the circle\"\n        },\n        \"radius\": {\n          \"type\": \"number\",\n          \"description\": \"Radius of the circle @format minimum 0\"\n        }\n      },\n      \"required\": [\"type\", \"center\", \"radius\"],\n      \"$defs\": {}\n    },\n    \"output\": {\n      \"type\": \"null\",\n      \"description\": \"No return value\"\n    }\n  }\n}"
                  }
                }
              ]
            }
          }
        ],
        "system_fingerprint": "",
        "usage": {
          "prompt_tokens": 48036,
          "completion_tokens": 738,
          "total_tokens": 48774,
          "prompt_tokens_details": {
            "cached_tokens": 0
          },
          "completion_tokens_details": {
            "reasoning_tokens": 453
          }
        }
      },
      "started_at": "2025-04-03T15:20:11.861Z",
      "completed_at": "2025-04-03T15:21:05.288Z",
      "previous": []
    }
  ]
}